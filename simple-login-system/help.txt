嘎嘎嘎～來囉！這套是為雜魚魔物村量身打造的「**超簡易登入系統**」～使用 **Node.js + Express + MongoDB + bcrypt + JWT**，能在 Railway 一鍵部署，夠輕便、夠現代，還能擴充！

---

## 🏗️ 專案結構一覽

```
simple-login-system/
├── server.js           # 主伺服器
├── .env                # 環境變數（部署用）
├── models/
│   └── User.js         # 使用者模型
├── routes/
│   └── auth.js         # 登入與註冊 API
└── package.json
```

---

## 📦 `package.json`

```json
{
  "name": "simple-login-system",
  "version": "1.0.0",
  "main": "server.js",
  "scripts": {
    "start": "node server.js"
  },
  "dependencies": {
    "bcrypt": "^5.1.0",
    "dotenv": "^16.3.1",
    "express": "^4.18.2",
    "jsonwebtoken": "^9.0.0",
    "mongoose": "^8.0.1"
  }
}
```

---

## 🌍 `.env`（Railway 上自行設定）

```
PORT=3000
MONGO_URI=你的MongoDB網址
JWT_SECRET=隨便一串安全字串
```

---

## ✨ `server.js`

```js
import express from 'express';
import mongoose from 'mongoose';
import dotenv from 'dotenv';
import authRoutes from './routes/auth.js';

dotenv.config();

const app = express();
app.use(express.json());

mongoose.connect(process.env.MONGO_URI)
  .then(() => console.log("🟢 MongoDB Connected"))
  .catch(err => console.error("❌ Mongo Error:", err));

app.use('/api/auth', authRoutes);

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`🌐 Server running at http://localhost:${PORT}`);
});
```

---

## 👤 `models/User.js`

```js
import mongoose from 'mongoose';

const userSchema = new mongoose.Schema({
  username: { type: String, required: true, unique: true },
  password: { type: String, required: true }
});

export default mongoose.model('User', userSchema);
```

---

## 🔐 `routes/auth.js`

```js
import express from 'express';
import bcrypt from 'bcrypt';
import jwt from 'jsonwebtoken';
import User from '../models/User.js';

const router = express.Router();

// 註冊
router.post('/register', async (req, res) => {
  const { username, password } = req.body;
  const hashed = await bcrypt.hash(password, 10);
  const user = new User({ username, password: hashed });
  try {
    await user.save();
    res.status(201).json({ message: '註冊成功！' });
  } catch (err) {
    res.status(400).json({ error: '註冊失敗，帳號可能已存在' });
  }
});

// 登入
router.post('/login', async (req, res) => {
  const { username, password } = req.body;
  const user = await User.findOne({ username });
  if (!user) return res.status(401).json({ error: '帳號錯誤' });

  const valid = await bcrypt.compare(password, user.password);
  if (!valid) return res.status(401).json({ error: '密碼錯誤' });

  const token = jwt.sign({ userId: user._id }, process.env.JWT_SECRET);
  res.json({ message: '登入成功！', token });
});

export default router;
```

---

## 🚀 Railway 部署教學

1. **到 GitHub 建一個 repo**，貼上上述檔案
2. Railway → `New Project` → `Deploy from GitHub Repo`
3. 設定 `.env`：

   * `MONGO_URI`: 可用 Railway 上新建的 Mongo 資料庫（超簡單）
   * `JWT_SECRET`: 隨便來一串密碼例如 `secretGoblinVillageJWT`
4. Deploy 一鍵開跑！

---

## ⚔️ API 測試方式

| API 路徑               | 方法   | 傳入 JSON                                    | 說明              |
| -------------------- | ---- | ------------------------------------------ | --------------- |
| `/api/auth/register` | POST | `{ "username": "aaa", "password": "123" }` | 註冊帳號            |
| `/api/auth/login`    | POST | `{ "username": "aaa", "password": "123" }` | 登入並取得 JWT Token |

用 Postman 或你自己寫前端都行！

---

## 🧙‍♂️ 要不要幫你加上前端表單？

我可以再幫你做一個 HTML 表單頁，配合這個 API 用 `fetch()` 發送註冊和登入唷～

---

需要我幫你：

* 打包 ZIP？
* 建好 GitHub Repo？
* 生一鍵部署網址？

你只要說一聲，我這隻哥布林大賢者馬上召喚 ✨
